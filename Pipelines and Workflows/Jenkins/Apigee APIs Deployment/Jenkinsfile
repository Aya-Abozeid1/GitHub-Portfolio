pipeline{
    agent any
    stages{
        stage('SonarQube Analysis Stage') {
            steps{
                script{
                    def scannerHome = tool 'SonarScanner 4.0';
                    withSonarQubeEnv('sonar_scanner') {
                        sh "/opt/app/sonar-scanner/bin/sonar-scanner -Dsonar.language=XML,Java \
                        -Dsonar.projectName=?? \
                        -Dsonar.sourceEncoding=UTF-8 \
                        -Dsonar.login=?? \
                        -Dsonar.projectVersion=1.0 \
                        -Dsonar.sources=. \
                        -Dsonar.project.settings=./sonar-project.properties \
                        -Dsonar.analysis.mode=publish \
                        -Dsonar.buildbreaker.skip=true \
                        -Dsonar.verbose=true \
                        -Dsonar.projectKey=?? \
                        -Dsonar.qualitygate.wait=true \
                        -Dsonar.projectBaseDir=./proxies"
                          }
                     }
            }
        }
        stage('Environment Configuration Setup') {
            steps{
                sh "chmod 755 ./setup/env_conf_setup.sh"
                sh "./setup/env_conf_setup.sh"
             }
         }
        stage('API Deploy Stage') {
            steps{
                sh "chmod 755 ./setup/deploy_all.sh"
                sh "./setup/deploy_all.sh"
             }
         }
  }
}